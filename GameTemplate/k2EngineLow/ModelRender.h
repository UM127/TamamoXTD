#pragma once

namespace nsK2EngineLow {
	class ModelRender {
	public:
		ModelRender();
		~ModelRender();
		/// <summary>
		/// 初期化。通常はこの関数で初期化してください。
		/// </summary>
		/// <param name="filePath">ファイルパス。</param>
		/// <param name="animationClips">アニメーションクリップ。</param>
		/// <param name="numAnimationClips">アニメーションクリップの数。</param>
		/// <param name="enModelUpAxis">モデルの上方向。</param>
		/// <param name="isShadowReciever">シャドウレシーバーフラグtrueなら影が落ちる。</param>
		/// <param name="maxInstance">
		/// インスタンスの最大数。この引数を１より大きくするとインスタンシング描画が行われます。
		/// インスタンシング描画を行う際は描画したいインスタンスの数分だけ、UpdateInstancingDraw()を呼び出す必要があります。
		/// インスタンシング描画の詳細はSmaple_XXを参照してください。
		/// </param>
		void Init(
			const char* filePath, bool shadow = false, AnimationClip* animationClips = nullptr,
			int numAnimationClips = 0,
			EnModelUpAxis enModelUpAxis = enModelUpAxisZ);
		/// <summary>
		/// シャドウの初期化。
		/// </summary>
		/// <param name="filePath">ファイルパス。</param>
		/// <param name="animationClips">アニメーションクリップ。</param>
		/// <param name="numAnimationClips">アニメーションクリップの数。</param>
		/// <param name="enModelUpAxis">モデルの上方向。</param>
		/// <param name="isShadowReciever">シャドウレシーバーフラグtrueなら影が落ちる。</param>
		/// <param name="maxInstance">
		/// インスタンスの最大数。この引数を１より大きくするとインスタンシング描画が行われます。
		/// インスタンシング描画を行う際は描画したいインスタンスの数分だけ、UpdateInstancingDraw()を呼び出す必要があります。
		/// インスタンシング描画の詳細はSmaple_XXを参照してください。
		/// </param>
		void ShadowInit(
			const char* filePath,
			bool shadow = false,
			AnimationClip* animationClips = nullptr,
			int numAnimationClips = 0,
			EnModelUpAxis enModelUpAxis = enModelUpAxisZ);
		/// <summary>
		/// 描画処理。
		/// </summary>
		void Update();
		/// <summary>
		/// 描画処理。
		/// </summary>
		void Draw(RenderContext& rc);

		/// <summary>
		/// モデルを取得。
		/// </summary>
		/// <returns>モデル</returns>
		Model& GetModel()
		{
			return m_model;
		}

		Model& GetShadowModel()
		{
			return m_ShadowModel;
		}


		/// <summary>
				/// 座標を設定。
				/// </summary>
				/// <remark>
				/// インスタンシング描画が有効の場合は、この設定は無視されます。
				/// </remark>
				/// <param name="pos">座標。</param>
		void SetPosition(const Vector3& pos)
		{
			m_position = pos;
		}
		/// <summary>
		/// 座標を設定。
		/// </summary>
		/// <param name="x">x座標</param>
		/// <param name="y">y座標</param>
		/// <param name="z">z座標</param>
		void SetPosition(float x, float y, float z)
		{
			SetPosition({ x, y, z });
		}
		/// <summary>
		/// 回転を設定。
		/// </summary>
		/// <remark>
		/// インスタンシング描画が有効の場合は、この設定は無視されます。
		/// </remark>
		/// <param name="rotation">回転。</param>
		void SetRotation(const Quaternion& rotation)
		{
			m_rotation = rotation;
		}
		/// <summary>
		/// 拡大率を設定。
		/// </summary>
		/// <remark>
		/// インスタンシング描画が有効の場合は、この設定は無視されます。
		/// </remark>
		/// <param name="scale">拡大率。</param>
		void SetScale(const Vector3& scale)
		{
			m_scale = scale;
		}
		void SetScale(float x, float y, float z)
		{
			SetScale({ x, y, z });
		}
		void SetShadowReciverBG()
		{
			m_ShadowRecieverBG = true;
		}
		/// <summary>
		/// ボーンの名前からボーン番号を検索。
		/// </summary>
		/// <param name="boneName">ボーンの名前</param>
		/// <returns>ボーン番号。見つからなかった場合は-1が返ってきます。</returns>
		int FindBoneID(const wchar_t* boneName) const
		{
			return m_skeleton.FindBoneID(boneName);
		}
		/// <summary>
		/// ボーン番号からボーンを取得。
		/// </summary>
		/// <param name="boneNo">ボーン番号</param>
		/// <returns>ボーン</returns>
		Bone* GetBone(int boneNo) const
		{
			return m_skeleton.GetBone(boneNo);
		}
		void AddAnimationEvent(AnimationEventListener eventListener)
		{
			m_animation.AddAnimationEventListener(eventListener);
		}

		/// <summary>
		/// アニメーション再生。
		/// </summary>
		/// <param name="animNo">アニメーションクリップの番号。</param>
		/// <param name="interpolateTime">補完時間(単位：秒。)</param>
		void PlayAnimation(int animNo, float interpolateTime = 0.0f)
		{
			m_animation.Play(animNo, interpolateTime);
		}
		/// <summary>
		/// アニメーションの再生中？
		/// </summary>
		bool IsPlayingAnimation() const
		{
			return m_animation.IsPlaying();
		}
		/// <summary>
		/// 描画パスから呼ばれる処理
		/// </summary>
		/// <param name="rc"></param>
		void DrawShadow(RenderContext& rc)
		{
			m_ShadowModel.Draw(rc, g_shadow.GetLightCamera());
		}

	private:
		// スケルトンを初期化
		void InitSkeleton(const char* filePath);
		//アニメーションの初期化
		void InitAnimation(AnimationClip* animationClips, int numAnimationClips, EnModelUpAxis enModelUpAxis);
	private:
		AnimationClip*              m_animationClips = nullptr;			// アニメーションクリップ。
		int							m_numAnimationClips = 0;			// アニメーションクリップの数。
		int							m_ShadowRecieverBG = false;			// シャドウ導入するのが背景か否か
		Animation					m_animation;						// アニメーション。
		Model                       m_model;		         	        // モデル
		Model						m_bgModel;							// シャドウを受ける背景のモデル
		Model						m_ShadowModel;						// シャドウ用のモデル
		ModelInitData				m_bgModelInitData;					// シャドウを受ける背景用のInitdata
		ModelInitData				m_ShadowModelInitData;				// シャドウモデル用のInitdata
		Sprite						m_shadowsprite;						// シャドウ用の画像
		Skeleton                    m_skeleton;	                        // スケルトン
		Vector3 					m_position = Vector3::Zero;			// 座標。
		Quaternion	 				m_rotation = Quaternion::Identity;	// 回転。
		Vector3						m_scale = Vector3::One;				// 拡大率。
		EnModelUpAxis				m_enFbxUpAxis = enModelUpAxisZ;			// FBXの上方向。
		const char*					m_shadowfilePath;
	};
}